---
title: "Investigate 2SPA Growth Models"
format: pdf
editor: visual
---

```{r setup, message=FALSE}
library(SimDesign)
library(lavaan)
library(tidyverse)
```

```{r FIXEDOBJECTS}
# Function to generate covariance matrix for minor factors
get_ucov <- function(p, scale = sqrt(0.1), seed = 123, n = 5) {
  set.seed(seed)
  W <- matrix(rnorm(p * n), nrow = n)
  WtW <- crossprod(W)
  D <- diag(1 / sqrt(diag(WtW))) * scale
  D %*% WtW %*% D
}
# Global covariance matrix for minor factors
UCOV <- get_ucov(20)

# Fixed objects
FIXEDOBJECTS <- list(
  ucov = UCOV,
  n_waves = 4,
  n_items = 5,
  theta_growth = .50,
  kappa1 = 0,
  Psi_growth = matrix(c(.5, .089, .089, .1), nrow = 2),
  kappa3 = -0.01,
  phi33 = 0.004,
  lambda_vec = c(.8, .5, .7, .65, .7),
  nu_vec = c(0, .5, -.25, .25, -.5),
  lambda_deviation =
    list(`0.25` = rbind(0, 0, 0, 0, seq(0, 0.3, length.out = 4)),
         `0.55` = rbind(0, 0,
                        c(0, 0.2, 0.3, 0.1),
                        c(0, -0.05, 0, 0.05),
                        seq(0, 0.3, length.out = 4))),
  nu_deviation =
    list(`0.25` = rbind(0, 0, 0,
                        seq(0, 0.75, length.out = 4),
                        c(0, 0.125, -0.125, 0)),
         `0.55` = rbind(c(0, 0.75, 0.5, 0.25),
                        c(0, 0.25, 0, 0.50),
                        0,
                        seq(0, 0.75, length.out = 4),
                        c(0, 0.125, -0.125, 0))),
  ar_rho = .20  # autoregressive coefficient
)
```

```{r generate}
generate <- function(condition, fixed_objects = NULL) {
  n_waves <- fixed_objects$n_waves  # number of waves
  n_items <- fixed_objects$n_items  # number of items
  # Loadings and error terms for growth model
  Lambda_growth <- cbind(1, seq_len(n_waves) - 1)
  Theta_growth <- diag(fixed_objects$theta_growth, n_waves)
  # Means and variances for growth factors
  Alpha_growth <- c(fixed_objects$kappa1, condition$kappa2)
  Psi_growth <- fixed_objects$Psi_growth
  if (condition$misspecify) {
    # Add minor quadratic trend
    Lambda_growth <- cbind(Lambda_growth, 
                           (seq_len(n_waves) - (n_waves + 1) / 2)^2)
    Alpha_growth <- c(Alpha_growth, fixed_objects$kappa3)
    Psi_growth <- rbind(
      cbind(Psi_growth, 0), 
      c(0, 0, fixed_objects$phi33)
    )
  }
  # Variances/Covariances and means of latent outcomes
  Psi_cfa <- Lambda_growth %*% Psi_growth %*% t(Lambda_growth) +
    Theta_growth
  Alpha_cfa <- Lambda_growth %*% Alpha_growth
  # Measurement parameters (loadings and intercepts)
  lambda_vec <- fixed_objects$lambda_vec
  lambda_mat <- matrix(
    lambda_vec,
    nrow = n_items, ncol = n_waves
  )
  nu_vec <- fixed_objects$nu_vec
  nu_mat <- matrix(
    nu_vec, 
    nrow = n_items, ncol = n_waves
  )
  # Add misspecification to loadings and intercepts
  r_ni_char <- as.character(condition$r_ni)
  if (condition$r_ni > 0) {
    lambda_mat <- lambda_mat + fixed_objects$lambda_deviation[[r_ni_char]]
    nu_mat <- nu_mat + fixed_objects$nu_deviation[[r_ni_char]]
  }
  # Convert to block loading matrix
  Lambda_cfa <- as.matrix(
    Matrix::bdiag(
      lapply(seq_len(ncol(lambda_mat)),
             function(i, x = lambda_mat) x[ , i])
    )
  )
  Nu_cfa <- as.vector(nu_mat)
  ar_rho <- fixed_objects$ar_rho
  if (condition$misspecify) {
    Theta_cfa <- ar_rho^abs(outer(seq_len(n_waves), seq_len(n_waves), "-")) %x%
      diag(1 - lambda_vec^2 - 0.1)
  } else {
    Theta_cfa <- ar_rho^abs(outer(seq_len(n_waves), seq_len(n_waves), "-")) %x%
      diag(1 - lambda_vec^2)
  }
  # Variances/Covariances and means of observed indicators
  Sigma <- Lambda_cfa %*% Psi_cfa %*% t(Lambda_cfa) + Theta_cfa
  Mu <- Lambda_cfa %*% Alpha_cfa + Nu_cfa
  # Add misspecification due to minor factors
  if (condition$misspecify) {
    Sigma <- Sigma + fixed_objects$ucov
  }
  dat <- mvnfast::rmvn(condition$n, mu = Mu, sigma = Sigma)
  colnames(dat) <- paste0("y",
                          outer(seq_len(n_items), seq_len(n_waves), paste0))
  as.data.frame(dat)
}
```

```{r helper-funs}
# Get partial model
get_partial_mod <- function(n_waves, n_items, 
                            lambda_prefix = NULL, 
                            nu_prefix = NULL) {
  yindices <- outer(seq_len(n_items), seq_len(n_waves), paste0)
  ynames <- t(yindices)
  ynames[] <- paste0("y", ynames)
  load_lines <- apply(`[<-`(ynames,
                            paste0(lambda_prefix, " * ", ynames)),
                      1,
                      paste0, collapse = " + ")
  paste0(
    c(paste0("eta", seq_len(n_waves), " =~ .8 * ", ynames[ , 1], " + ",
             load_lines,
             collapse = "\n  "),
      paste0(ynames[ , 1], " ~ 0 * 1 + ",
             nu_prefix[ , 1], " * 1", collapse = "\n  "),
      paste0(ynames[ , -1], " ~ ",
             nu_prefix[ , -1],
             " * 1", collapse = "\n  "),
      paste0(
        apply(ynames, 2, function(x) {
          combn(x, 2, FUN = paste0, collapse = " ~~ ")
        }),
        collapse = "\n  "
      )
    ),
    collapse = "\n  "
  )
}

# Get factor scores
get_fs <- function(data, model = NULL, ...) {
  fit <- cfa(model, data = data, ...)
  est <- lavInspect(fit, what = "est")
  y <- lavInspect(fit, what = "data")
  compute_fscore(y,
                 lambda = est$lambda,
                 theta = est$theta,
                 psi = est$psi,
                 nu = est$nu,
                 alpha = est$alpha,
                 fs_matrices = TRUE)
}

# Helper function to compute factor scores, av_efs, and fsA
compute_fscore <- function(y, lambda, theta, psi,
                           nu = NULL, alpha = NULL,
                           acov = FALSE,
                           fs_matrices = FALSE) {
  if (is.null(nu)) nu <- colMeans(y)
  if (is.null(alpha)) alpha <- rep(0, ncol(as.matrix(lambda)))
  covy <- lambda %*% psi %*% t(lambda) + theta
  meany <- lambda %*% alpha + nu
  y1c <- t(as.matrix(y)) - as.vector(meany)
  # Bartlett score
  ginvth <- MASS::ginv(theta)
  tlam_invth <- crossprod(lambda, ginvth)
  a_mat <- solve(tlam_invth %*% lambda, tlam_invth)
  fs <- t(a_mat %*% y1c + as.vector(alpha))
  if (fs_matrices) {
    fsA <- unclass(a_mat %*% lambda)
    attr(fs, "fsA") <- fsA
    attr(fs, "fsb") <- alpha - fsA %*% alpha
    attr(fs, "av_efs") <- a_mat %*% theta %*% t(a_mat)
    attr(fs, "int_efs") <- a_mat %*% nu
  }
  fs
}

# Get 2SPA model with one group and multiple factors
get_tspa_mod <- function(data, vc, fsA, int, n_waves) {
  var <- colnames(vc)
  len <- nrow(vc)
  
  col <- colnames(data)
  fs <- paste0("fs_", var)
  colnames(vc) <- rownames(vc) <- fs
  
  # latent variables
  loadings <- paste0(fsA, " * ", fs)
  loadings_list <- split(loadings, factor(rep(var, each = len),
                                          levels = var))
  loadings_c <- lapply(loadings_list, function(x) {
    paste0(x, collapse = " + ")
  })
  latent_var_str <- paste(var, "=~", loadings_c)
  # error variances
  vc_in <- !upper.tri(vc)
  ev_rhs <- colnames(vc)[col(vc_in)[vc_in]]
  ev_lhs <- rownames(vc)[row(vc_in)[vc_in]]
  error_constraint_str <- paste0(ev_lhs, " ~~ ", vc[vc_in], " * ", ev_rhs)
  
  paste0(c(
    "# latent variables (indicated by factor scores)",
    latent_var_str,
    "# constrain intercepts", 
      paste0("fs_eta", seq_len(n_waves), " ~ ", int, " * 1"), 
    "# constrain errors",
    error_constraint_str
  ),
  collpase = "\n")
}

# Fit 2SPA growth model
fit_2spa_growth <- function(tspa_mod, fs, n_waves, lambda_prefix, nu_prefix) {
  growth_model <- paste0(c(
    tspa_mod, 
    "# Linear Growth Model", 
    paste0("i =~ ", paste0((paste0("1 * eta", seq_len(n_waves))), 
                           collapse = " + ")), 
    paste0("s =~ ", paste0(paste0(seq_len(n_waves) - 1, " * eta", seq_len(n_waves)), 
                           collapse = " + ")), 
    "# Variance-covariances of intercepts and slopes", 
    "i ~~ i", "s ~~ s", "i ~~ s", 
    "# Means of level and slope", 
    "i ~ 1", "s ~ 1", 
    paste0("eta", seq_len(n_waves),
           " ~~ psi * eta", seq_len(n_waves), collapse = "\n  "),
    paste0("eta", seq_len(n_waves), " ~ 0 * 1", collapse = "\n  ")
    # "# Fixed disturbances of latent outcomes to zero", 
    # paste0("eta", seq_len(n_waves), " ~ 0 * 1")
  ), collapse = "\n")
  lavaan::sem(growth_model, data = fs)
}

# Helper function to extract output
extract_res <- function(object, pars = c("i~1", "s~1", "i~~i", "s~~s"),
                        true_load = .67 * 5, true_int = 0, tspa = FALSE) {
  coefs <- lavaan::coef(object, type = "user")
  scaled_ses <- sqrt(diag(lavaan::vcov(object)[pars, pars]))
  scaled_ests <- coefs[pars]
  if (!tspa) {
    sum_load <- coefs["sum_load"]
    sum_int <- coefs["sum_int"]
  } else {
    sum_load <- sum(true_load)
    sum_int <- sum(true_int)
  }
  scaled_ests[1] <- (sum_int - true_int + sum_load * scaled_ests[1]) /
    true_load
  scaled_ests[2] <- scaled_ests[2] * sum_load / true_load
  scaled_ests[3:4] <- (sum_load / true_load)^2 * scaled_ests[3:4]
  scaled_ses[1:2] <- (sum_load / true_load) * scaled_ses[1:2]
  scaled_ses[3:4] <- (sum_load / true_load) * scaled_ses[3:4]
  c(scaled_ests, scaled_ses)
}
```

```{r}
fit_2nd_growth_w_labels <- function(dat, n_waves, n_items,
                                    lambda_prefix = NULL,
                                    nu_prefix = NULL) {
  yindices <- outer(seq_len(n_items), seq_len(n_waves), paste0)
  ynames <- t(yindices)
  ynames[] <- paste0("y", ynames)
  load_lines <- apply(`[<-`(ynames,
                            paste0(lambda_prefix, " * ", ynames)),
                      1,
                      paste0, collapse = " + ")
  growth_model <- paste0(
    c(paste0("eta", seq_len(n_waves), " =~ .8 * ", ynames[ , 1], " + ",
             load_lines,
             collapse = "\n  "),
      paste0("i =~ ", paste0("1 * eta", seq_len(n_waves),
                             collapse = " + ")),
      paste0("s =~ ", paste0(seq_len(n_waves) - 1, " * eta",
                             seq_len(n_waves), collapse = " + ")),
      paste0(ynames[ , 1], " ~ 0 * 1 + ",
             nu_prefix[ , 1], " * 1", collapse = "\n  "),
      paste0(ynames[ , -1], " ~ ",
             nu_prefix[ , -1],
             " * 1", collapse = "\n  "),
      paste0(
        apply(ynames, 2, function(x) {
          combn(x, 2, FUN = paste0, collapse = " ~~ ")
        }),
        collapse = "\n  "
      ),
      paste0("eta", seq_len(n_waves),
             " ~~ psi * eta", seq_len(n_waves), collapse = "\n  "),
      paste0("eta", seq_len(n_waves), " ~ 0 * 1", collapse = "\n  "),
      "# Sum of loadings and intercepts",
      paste0("sum_load := .8 + ",
             paste0(lambda_prefix[1, -1], collapse = " + ")),
      paste0("sum_int := ",
             paste0(nu_prefix[1, -1], collapse = " + "))
    ),
    collapse = "\n  "
  )
  lavaan::growth(growth_model, data = dat)
}
```

# Confirm that 2SPA produces the same results as CFA

```{r}
DESIGNFACTOR <- createDesign(
  n = c(1e5),
  r_ni = c(0), # 0, .25, .55
  kappa2 = c(0), # 0, 0.25
  misspecify = c(FALSE)
)
```

```{r generate-data}
set.seed(1234)
dat <- generate(DESIGNFACTOR[1, ], fixed_objects = FIXEDOBJECTS)
```

```{r}
# Get labels for the partial scalar model
lambda_labels <- matrix(paste0("l", seq_len(n_items)),
                        nrow = n_waves, ncol = n_items,
                        byrow = TRUE)
nu_labels <- matrix(paste0("n", seq_len(n_items)),
                    nrow = n_waves, ncol = n_items,
                    byrow = TRUE)
if (DESIGNFACTOR$r_ni == 0.25) {
  lambda_labels[ , n_items] <- paste0(lambda_labels[ , n_items],
                                      seq_len(n_waves))
  nu_labels[ , seq.int(n_items - 1, n_items)] <-
    paste0(nu_labels[ , seq.int(n_items - 1, n_items)], seq_len(n_waves))
} else if (DESIGNFACTOR$r_ni == 0.55) {
  lambda_labels[ , 3:n_items] <- paste0(lambda_labels[ , 3:n_items],
                                        seq_len(n_waves))
  nu_labels[ , seq.int(2, n_items)] <-
    paste0(nu_labels[ , seq.int(2, n_items)], seq_len(n_waves))
}
```

```{r}
# CFA model
partial_mod <- get_partial_mod(n_waves, n_items, lambda_labels, nu_labels)
cfa_fit <- cfa(partial_mod, dat, meanstructure = TRUE)

# Obtain Bartlett scores
# fs_dat <- R2spa::get_fs(dat, partial_mod, method = "Bartlett")
fs_dat <- get_fs(dat, partial_mod)
eta_names <- paste0("eta", seq_len(n_waves))
colnames(fs_dat) <- paste0("fs_", eta_names)
```

```{r}
# Fit 2SPA using Bartlett scores 
tspa_mod <- get_tspa_mod(fs_dat, vc = attr(fs_dat, "av_efs"),
                         fsA = attr(fs_dat, "fsA"),
                         int = attr(fs_dat, "fsb"), 
                         n_waves = 4)
tspa_fit <- cfa(tspa_mod, fs_dat, meanstructure = TRUE)
```

```{r}
subset(parameterestimates(cfa_fit),
       lhs %in% paste0("eta", 1:4) & op %in% c("~~", "~1"))
subset(parameterestimates(tspa_fit), 
       lhs %in% paste0("eta", 1:4) & op %in% c("~~", "~1"))
```

# Simulate a large dataset

```{r}
DESIGNFACTOR <- createDesign(
  n = c(1e5),
  r_ni = c(0, .25, .55), # 0, .25, .55
  kappa2 = c(0, 0.25), # 0, 0.25
  misspecify = c(FALSE)
)
```

```{r generate-data}
set.seed(1234)
dat <- generate(DESIGNFACTOR[1, ], fixed_objects = FIXEDOBJECTS)
```

```{r analyze-data}
analyse <- function(condition, dat, fixed_objects = NULL) {
  n_waves <- fixed_objects$n_waves
  n_items <- fixed_objects$n_items
  # Initialize output
  methods <- c("PI", "TSPAB")
  pars <- c("meani", "means", "vari", "vars")
  stats <- c("est", "ase")
  out <- vector("list", length(methods))
  names(out) <- methods
  
  # Growth model (partial invariance)
  lambda_labels <- matrix(paste0("l", seq_len(n_items)),
                          nrow = n_waves, ncol = n_items,
                          byrow = TRUE)
  nu_labels <- matrix(paste0("n", seq_len(n_items)),
                      nrow = n_waves, ncol = n_items,
                      byrow = TRUE)
  if (condition$r_ni == 0.25) {
    lambda_labels[ , n_items] <- paste0(lambda_labels[ , n_items],
                                        seq_len(n_waves))
    nu_labels[ , seq.int(n_items - 1, n_items)] <-
      paste0(nu_labels[ , seq.int(n_items - 1, n_items)], seq_len(n_waves))
  } else if (condition$r_ni == 0.55) {
    lambda_labels[ , 3:n_items] <- paste0(lambda_labels[ , 3:n_items],
                                          seq_len(n_waves))
    nu_labels[ , seq.int(2, n_items)] <-
      paste0(nu_labels[ , seq.int(2, n_items)], seq_len(n_waves))
  }
  growth_fit_pi <- fit_2nd_growth_w_labels(dat,
                                           n_waves = n_waves,
                                           n_items = n_items,
                                           lambda_prefix = lambda_labels,
                                           nu_prefix = nu_labels)
  out$PI <- extract_res(growth_fit_pi)
  
  # Growth model (2SPA with Bartlett Scores)
  partial_mod <- get_partial_mod(n_waves, n_items, lambda_labels, nu_labels)
  fs_dat <- R2spa::get_fs(dat, partial_mod, method = "Bartlett")
  eta_names <- paste0("eta", seq_len(n_waves))
  colnames(fs_dat) <- paste0("fs_", eta_names)
  tspa_mod <- get_tspa_mod(fs_dat, 
                           vc = attr(fs_dat, "av_efs"), 
                           fsA = attr(fs_dat, "fsA"), 
                           int = attr(fs_dat, "fsb"), 
                           n_waves = n_waves)
  growth_fit_2spa_bart <- fit_2spa_growth(tspa_mod, fs_dat, n_waves)
  out$TSPAB <- extract_res(growth_fit_2spa_bart, tspa = TRUE)
  
  # Reorder output
  out <- unlist(out)[c(aperm(array(seq_len(length(methods) * length(stats) *
                                             length(pars)),
                                   dim = c(length(pars),
                                           length(stats),
                                           length(methods))), c(3, 1, 2)))]
  # Add names
  names_out <- outer(
    outer(stats, methods, FUN = paste, sep = "_"), pars,
    FUN = paste, sep = "_")
  names(out) <- aperm(names_out, perm = c(2, 3, 1))
  out
}
```

```{r}
evaluate <- function(condition, results, fixed_objects = NULL) {
  # Specify population value
  methods <- c("PI", "TSPA")
  pars <- c("meani", "means", "vari", "vars")
  pop <- rep(c(fixed_objects$kappa1, condition$kappa2, 
               diag(fixed_objects$Psi_growth)), each = length(methods))
  results_est <- results[grep("^est_", colnames(results))]
  ret <- c(
    bias = SimDesign::bias(
      results_est,
      parameter = pop)
  )
  ret
}
```

```{r}
res <-
  runSimulation(
    design = DESIGNFACTOR,
    replications = 1,
    generate = generate,
    analyse = analyse,
    summarise = evaluate,
    packages = c("Matrix", "lavaan", "mvnfast", "sirt"),
    fixed_objects = FIXEDOBJECTS, 
    seed = rep(670084, nrow(DESIGNFACTOR)),
    parallel = TRUE,
    ncores = min(4L, parallel::detectCores() - 1)
  )
```

```{r}
res_long <- res |> 
  select(r_ni, kappa2, contains("bias") & !contains("std")) |> 
   pivot_longer(
     bias.est_PI_meani:bias.est_TSPAB_vars, 
     names_to = c("method", "summary", "parameter"), 
     values_to = "est", 
     names_pattern = "bias.est_(PI|TSPAB)_(mean|var)(i|s)"
   )
```

```{r}
res_long |> 
  filter(parameter == "i", summary == "mean") |>
  mutate(est = round(est, 3))
```

```{r}
res_long |> 
  filter(parameter == "s", summary == "mean") |>
  mutate(est = round(est, 3))
```
